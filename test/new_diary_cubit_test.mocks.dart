// Mocks generated by Mockito 5.4.2 from annotations
// in martin_pulgar_demo/test/new_diary_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:image_picker/image_picker.dart' as _i6;
import 'package:image_picker_platform_interface/image_picker_platform_interface.dart'
    as _i3;
import 'package:martin_pulgar_demo/core/repositories/new_diary_repository.dart'
    as _i4;
import 'package:martin_pulgar_demo/feature/models/new_diary_response.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNewDiaryResponse_0 extends _i1.SmartFake
    implements _i2.NewDiaryResponse {
  _FakeNewDiaryResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLostDataResponse_1 extends _i1.SmartFake
    implements _i3.LostDataResponse {
  _FakeLostDataResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NewDiaryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewDiaryRepository extends _i1.Mock
    implements _i4.NewDiaryRepository {
  MockNewDiaryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.NewDiaryResponse> createNewDiary(
          {required Map<String, dynamic>? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNewDiary,
          [],
          {#data: data},
        ),
        returnValue:
            _i5.Future<_i2.NewDiaryResponse>.value(_FakeNewDiaryResponse_0(
          this,
          Invocation.method(
            #createNewDiary,
            [],
            {#data: data},
          ),
        )),
      ) as _i5.Future<_i2.NewDiaryResponse>);
}

/// A class which mocks [ImagePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImagePicker extends _i1.Mock implements _i6.ImagePicker {
  MockImagePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.XFile?> pickImage({
    required _i3.ImageSource? source,
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    _i3.CameraDevice? preferredCameraDevice = _i3.CameraDevice.rear,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
          {
            #source: source,
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #preferredCameraDevice: preferredCameraDevice,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i5.Future<_i3.XFile?>.value(),
      ) as _i5.Future<_i3.XFile?>);
  @override
  _i5.Future<List<_i3.XFile>> pickMultiImage({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultiImage,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i5.Future<List<_i3.XFile>>.value(<_i3.XFile>[]),
      ) as _i5.Future<List<_i3.XFile>>);
  @override
  _i5.Future<_i3.XFile?> pickMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i5.Future<_i3.XFile?>.value(),
      ) as _i5.Future<_i3.XFile?>);
  @override
  _i5.Future<List<_i3.XFile>> pickMultipleMedia({
    double? maxWidth,
    double? maxHeight,
    int? imageQuality,
    bool? requestFullMetadata = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickMultipleMedia,
          [],
          {
            #maxWidth: maxWidth,
            #maxHeight: maxHeight,
            #imageQuality: imageQuality,
            #requestFullMetadata: requestFullMetadata,
          },
        ),
        returnValue: _i5.Future<List<_i3.XFile>>.value(<_i3.XFile>[]),
      ) as _i5.Future<List<_i3.XFile>>);
  @override
  _i5.Future<_i3.XFile?> pickVideo({
    required _i3.ImageSource? source,
    _i3.CameraDevice? preferredCameraDevice = _i3.CameraDevice.rear,
    Duration? maxDuration,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pickVideo,
          [],
          {
            #source: source,
            #preferredCameraDevice: preferredCameraDevice,
            #maxDuration: maxDuration,
          },
        ),
        returnValue: _i5.Future<_i3.XFile?>.value(),
      ) as _i5.Future<_i3.XFile?>);
  @override
  _i5.Future<_i3.LostDataResponse> retrieveLostData() => (super.noSuchMethod(
        Invocation.method(
          #retrieveLostData,
          [],
        ),
        returnValue:
            _i5.Future<_i3.LostDataResponse>.value(_FakeLostDataResponse_1(
          this,
          Invocation.method(
            #retrieveLostData,
            [],
          ),
        )),
      ) as _i5.Future<_i3.LostDataResponse>);
  @override
  bool supportsImageSource(_i3.ImageSource? source) => (super.noSuchMethod(
        Invocation.method(
          #supportsImageSource,
          [source],
        ),
        returnValue: false,
      ) as bool);
}
